@using Incoding.Web.Components.Grid;
@{
    Action<ColumnListBuilder<SampleData>> periodCols = cols => cols.Spreaded(s => s.Period, 5,
                                 (cols, i) =>
                                 {
                                     cols.Stacked(s => s.Title(DateTime.Now.AddDays(i).ToShortDateString()),
                                                  cols =>
                                                  {
                                                      cols.Add().Field(s => s.Hours).Title("Hrs").Width(70).Totalable()
                                                        .Content(
                                                            @<text>
                                                                @Html.Components().Inputs.Numeric(options =>
                                                                {
                                                                    options.Input.OnChange = dsl => dsl.Window.Console.Log("m-debug", "change");
                                                                    options.Input.Value = item.For(s => s.Hours);

                                                                    options.Type = NumericOptions.OfType.Decimal;
                                                                })
                                                            </text>);
                                                  });
                                 });

    Action<ColumnListBuilder<SampleData>> regularCols = (cols) =>
                     {
                        cols.Add().Content(
                            @<text>
                                @Html.Components().GridUtils.DropdownInvoker(settings =>
                                {
                                    settings.Content = "...";

                                    settings.Button = s => s.Id("regular-dropdown");
                                })
                            </text>).Width(40);

                        cols.Add().Field(s => s.Index).Width(50).Format(ColumnFormat.Empty).HeaderAttr("style", "height: 54px;");

                        cols.Add().Field(s => s.Name).Width(70);
                        cols.Add().Field(s => s.Description).Title("Notes").Width(200);

                        cols.Add().Field(s => s.Amount).Width(70).Totalable();
                        cols.Add().Field(s => s.AmountPercentage).Title("Amount %").Width(70);
                        cols.Add().Field(s => s.Balance).Width(70).IsAttr(s => s.HasChildren, "disabled").Align(ColumnAlignment.Right);

                        cols.Stacked(s => s.Title("Dates"),
                                        cols =>
                                        {
                                            cols.Add().Field(s => s.Start).Width(70);
                                            cols.Add().Field(s => s.End).Width(70);
                                        });
                     };

    var controller = new IMLGridController("grid");
}

@{
    var sampleQueryData = "{ \"Id\": 1 }";
}

<input name="aboba" value="@sampleQueryData" type="hidden" />

@(Html.Components().Grid<SampleData>("grid")
    .Width("100%").Height("100%")
    .Css("bg-white")
    .Split(splitting =>
    {
        splitting.Add("regular", table =>
        {
            table.Css("table table-bordered ")
                 .Rows(row => row.Css("tr-item-calculate"))
                 .Columns(regularCols)
                 .DropdownTmpl(
                    @<text>
                        <div class="dropdown">
                            <button id="regular-dropdown" class="hidden" type="button" data-bs-toggle="dropdown" aria-expanded="false"></button>
                            <ul class="dropdown-menu">
                                @(Html.When(JqueryBind.Click)
                                      .StopPropagation()
                                      .OnSuccess(dsl => dsl.Window.Alert(item.For(s => s.AmountPercentage)))
                                      .AsHtmlAttributes()
                                      .ToTag(HtmlTag.Li, "<a class='dropdown-item' href='javascript:void(0)'>Monkey type</a>"))
                            </ul>
                        </div>
                    </text>);
        });

        splitting.Add("bebius", table =>
        {
            table.Css("table table-bordered ")
                 .Rows(row => row.Css("tr-item-calculate")
                                 .Bind(iml => iml.When(JqueryBind.InitIncoding)
                                                 .OnSuccess(dsl => dsl.Self().JQuery.Call("excelField"))))
                 .Columns(periodCols);
        });
    })
    .Bind(iml => iml.When(JqueryBind.Load)
                    .OnSuccess(dsl => controller.StartWebsocket(dsl, Selector.Jquery.Name("aboba"))))
    .InfiniteScrolling(scroll =>
    {
        scroll.ChunkSize = 20;
        scroll.LoadingRowsCount = 3;
    })
    .UI(ui =>
    {
        ui.HighlightRowsOnHover = true;
        ui.PlaceholderRows = 5;
    })
    .Empty(await Html.PartialAsync("~/Views/Shared/NoData.cshtml"))
    .DataSource(new DataSource.SignalR
    {
        ChunkSize = 40,
        Method = "StreamData_Small"
    })
    .Render())
