@using Incoding.Web.Components.Grid;
@{
    Action<ColumnListBuilder<SampleData>> periodCols = cols => cols.Spreaded(s => s.Period, 5,
                                 (cols, i) =>
                                 {
                                     cols.Stacked(s => s.Title(DateTime.Now.AddDays(i).ToShortDateString()),
                                                  cols =>
                                                  {
                                                      cols.Add().Field(s => s.Hours).Title("Hrs").Width(70).Totalable();
                                                      cols.Add().Field(s => s.JTD).Title("$").Width(70).Totalable();
                                                  });
                                 });

    Action<ColumnListBuilder<SampleData>, int> regularCols = (cols, i) =>
                     {
                        cols.Add().Content(
                        @<text>
                            @using (item.Is(s => s.HasChildren))
                            {
                                @Html.Components().GridUtils.ExpandButton(settings =>
                                {
                                    settings.Content = i.ToString();
                                })
                            }
                        </text>).Width(40);

                        cols.Add().Field(s => s.Name).Width(70);
                        cols.Add().Field(s => s.Description).Title("Notes").Width(200);

                        cols.Add().Field(s => s.Amount).Width(70).Totalable();
                        cols.Add().Field(s => s.AmountPercentage).Title("Amount %").Width(70);
                        cols.Add().Field(s => s.Balance).Width(70);

                        cols.Stacked(s => s.Title("Dates"),
                                        cols =>
                                        {
                                            cols.Add().Field(s => s.Start).Width(70);
                                            cols.Add().Field(s => s.End).Width(70);
                                        });
                     };
}

@(Html.Components().Grid<SampleData>("grid")
      .Split(splitting =>
      {
            splitting.Add("regular", table =>
            {
                table.Css("table table-bordered table-component")
                     .Rows(row => row.Css("tr-item-calculate"))
                     .Columns(cols =>
                     {
                         regularCols(cols, 1);
                         regularCols(cols, 1);
                         regularCols(cols, 1);
                     })
                     .Nested(s => s.Children, nested =>
                     {
                            nested.Columns(cols =>
                            {
                                regularCols(cols, 2);
                                regularCols(cols, 2);
                                regularCols(cols, 2);
                            });

                            nested.Nested(s => s.Children, nested =>
                            {
                                nested.Columns(cols =>
                                {
                                    regularCols(cols, 3);
                                    regularCols(cols, 3);
                                    regularCols(cols, 3);
                                });
                            });
                     });
            });

            splitting.Add("period", table =>
            {
                table.Css("table table-bordered table-component")
                     .Rows(row => row.Css("tr-item-calculate"))
                     .Columns(cols =>
                     {
                         periodCols(cols);
                     });

                table.Nested(s => s.Children, nested =>
                {
                    nested.Columns(cols =>
                    {
                        periodCols(cols);
                    });

                    nested.Nested(s => s.Children, nested =>
                    {
                        nested.Columns(cols =>
                        {
                            periodCols(cols);
                        });
                    });
                });
            });
      })
      .Bind(iml => iml.When(Bindings.Grid.Init)
                      .OnSuccess(dsl => dsl.Self().JQuery.Call("data('loader').startLoading"))
                      .When(Bindings.Grid.InfiniteScroll.Start)
                      .OnSuccess(dsl => dsl.Self())
                      .When(Bindings.Grid.InfiniteScroll.Complete)
                      .OnSuccess(dsl => dsl.Self().JQuery.Call("data('splitGrid').totals")))
      .Virtualize(v =>
      {
          v.InfinteScrolling = true;
          v.ChunkSize = 40;
      })
      .UI(ui =>
      {
          ui.HighlightRowsOnHover = true;
          ui.CascadeEvents = true; // option for advanced simple (advanced) schemas
      })
      .Render(useConcurrentRender: false))
